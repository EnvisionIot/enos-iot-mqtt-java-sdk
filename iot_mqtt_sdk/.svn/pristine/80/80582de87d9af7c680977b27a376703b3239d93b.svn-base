//package com.envisioniot.enos.iot_mqtt_sdk.message;
//
//import java.util.Arrays;
//import java.util.List;
//import java.util.regex.Matcher;
//import java.util.regex.Pattern;
//
//import com.envisioniot.enos.iot_mqtt_sdk.core.msg.IMqttArrivedMessage;
//import com.envisioniot.enos.iot_mqtt_sdk.util.GsonUtil;
//
//@Deprecated
//public abstract class BaseArrivedMessage extends BaseMessage implements IMqttArrivedMessage
//{
//    private Pattern pattern;
//    public BaseArrivedMessage()
//    {
//        pattern = Pattern.compile(getMatchTopicPattern());
//    }
//
//    public DecodeResult decode(String topic, byte[] payload)
//    {
//        List<String> path = match(topic);
//        if(path == null)
//        {
//            return null;
//        }
//
//        IMqttArrivedMessage arrivedMsg = null;
//
//        try
//        {
//            arrivedMsg = _decode(payload);
//        }
//        catch(Exception e)
//        {
//            throw new RuntimeException("decode payload err:" + Arrays.toString(payload), e);
//        }
//
//        if(arrivedMsg == null)
//        {
//            throw new RuntimeException("can't decode payload:" + Arrays.toString(payload));
//        }
//
//        arrivedMsg.setMessageTopic(topic);
//
//        if(path.size() > 0)
//        {
//            arrivedMsg.setProductKey(path.get(0));
//        }
//
//        if(path.size() > 1)
//        {
//            arrivedMsg.setDeviceKey(path.get(1));
//        }
//
//        return new DecodeResult(arrivedMsg, path);
//    }
//
//
//    protected List<String> match(String topic)
//    {
//        Matcher matcher = pattern.matcher(topic);
//        if (matcher.matches())
//        {
//            String[] groups = new String[matcher.groupCount()];
//            for (int i = 0; i < matcher.groupCount(); i++)
//            {
//                groups[i] = matcher.group(i + 1);
//            }
//
//            return Arrays.asList(groups);
//        }
//
//        return null;
//    }
//
//    protected IMqttArrivedMessage _decode(byte[] payload) throws Exception
//    {
//        String msg = new String(payload, "UTF-8");
//        return GsonUtil.fromJson(msg, this.getClass());
//    }
//}
