package com.envisioniot.enos.iot_mqtt_sdk.message.upstream.register;

import java.util.List;
import java.util.Map;

import com.envisioniot.enos.iot_mqtt_sdk.core.exception.EnvisionException;
import com.envisioniot.enos.iot_mqtt_sdk.core.internals.constants.DeliveryTopicFormat;
import com.envisioniot.enos.iot_mqtt_sdk.core.internals.constants.MethodConstants;
import com.envisioniot.enos.iot_mqtt_sdk.message.upstream.BaseMqttRequest;
import com.envisioniot.enos.iot_mqtt_sdk.util.CheckUtil;
import com.envisioniot.enos.iot_mqtt_sdk.util.StringUtil;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.Gson;

/**
 * Description: sub-device dynamic register request
 *
 * @author zhonghua.wu
 * @create 2018-07-20 10:33
 */
public class SubDeviceDynamicRegMqttRequest extends BaseMqttRequest<SubDeviceDynamicRegResponse>
{
	private static final int MAX_DEVICE_SIZE = 1000;

//	private static final int DYNAMIC_REGISTER = 1;

	private String regProductKey;
	private List<DeviceRegOption> regOptionList;

	public SubDeviceDynamicRegMqttRequest()
	{
		super();
		super.setMethod(MethodConstants.SUB_DEVICE_REGISTER);

		regOptionList = Lists.newArrayList();
	}

	public void setRegProductKey(String regProductKey)
	{
		this.regProductKey = regProductKey;
	}

	public void setRegOptionList(List<DeviceRegOption> regOptionList)
	{
		this.regOptionList = regOptionList;
	}

	public void addRegOptionList(List<DeviceRegOption> regOptionList)
	{
		this.regOptionList.addAll(regOptionList);
	}

	public void addRegOption(DeviceRegOption regOption)
	{
		this.regOptionList.add(regOption);
	}

	public String getRegProductKey()
	{
		return regProductKey;
	}

	public List<DeviceRegOption> getRegOptionList()
	{
		return regOptionList;
	}

	@Override
	public Object getParams()
	{
		List<Map<String, Object>> params = Lists.newArrayList();
		for (DeviceRegOption regOption : regOptionList)
		{
			Map<String, Object> item = Maps.newHashMap();
			item.put("productKey", regProductKey);
			if (regOption.deviceAttributes != null && !regOption.deviceAttributes.isEmpty()) {
				item.put("deviceAttributes", regOption.deviceAttributes);
			}
			if (StringUtil.isNotEmpty(regOption.deviceKey)) {
				item.put("deviceKey", regOption.deviceKey);
			}
			if (StringUtil.isNotEmpty(regOption.deviceName)) {
				item.put("deviceName", regOption.deviceName);
			}
			if (StringUtil.isNotEmpty(regOption.deviceDesc)) {
				item.put("deviceDesc", regOption.deviceDesc);
			}
			params.add(item);
		}
		return params;
	}

	@Override
	public Class<SubDeviceDynamicRegResponse> getAnswerType()
	{
		return SubDeviceDynamicRegResponse.class;
	}

	@Override
	public void check() throws EnvisionException
	{
		CheckUtil.checkNotEmpty(regProductKey, "regProductKey");
		CheckUtil.checkNotEmpty(regOptionList, "regOptionList");
		CheckUtil.checkMaxSize(regOptionList, MAX_DEVICE_SIZE, "regOptionList");
	}

	public static void main(String[] args)
	{
		Map<String, Object> deviceAttributes = Maps.newHashMap();
		deviceAttributes.put("color", "red");
		DeviceRegOption regOption = new DeviceRegOption();
		regOption.deviceAttributes = deviceAttributes;
		regOption.deviceKey = "deviceKey1";
		regOption.deviceName = "deviceName1";
		regOption.deviceDesc = "deviceDesc1";
		SubDeviceDynamicRegMqttRequest request = new SubDeviceDynamicRegMqttRequest();
		request.addRegOption(regOption);
		System.out.println(new Gson().toJson(request.getParams()));
	}

    @Override
    protected String _getPK_DK_FormatTopic()
    {
        return DeliveryTopicFormat.SUB_DEVICE_REGISTER_TOPIC_FMT;
    }
}
